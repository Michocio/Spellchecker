/** @defgroup dictionary Moduł dictionary
    Biblioteka obsługująca słownik.
  */
/** @file 
    Interfejs biblioteki obsługującej słownik.
   
    @ingroup dictionary
    @author Jakub Pawlewicz <pan@mimuw.edu.pl>
    @copyright Uniwersytet Warszawski
    @date 2015-05-10
 */

#ifndef __DICTIONARY_H__
#define __DICTIONARY_H__

#include "word_list.h"
#include <stdbool.h>
#include <wchar.h>
#include <stdio.h>
/**
  Struktura przechowująca słownik.
  */
struct dictionary;


/**
  Inicjalizacja słownika.
  Słownik ten należy zniszczyć za pomocą dictionary_done().
  @return Nowy słownik
  */
struct dictionary * dictionary_new(void);


/**
  Destrukcja słownika.
  @param[in,out] dict Słownik.
  */
void dictionary_done(struct dictionary *dict);


/**
  Wstawia podane słowo do słownika.
  @param[in,out] dict Słownik.
  @param[in] word Słowo, które należy wstawić do słownika.
  @return 0 jeśli słowo było już w słowniku, 1 jeśli udało się wstawić.
  */
int dictionary_insert(struct dictionary *dict, const wchar_t* word);


/**
  Usuwa podane słowo ze słownika, jeśli istnieje.
  @param[in,out] dict Słownik.
  @param[in] word Słowo, które należy usunąć ze słownika.
  @return 1 jeśli udało się usunąć, zero jeśli nie.
  */
int dictionary_delete(struct dictionary *dict, const wchar_t* word);


/**
  Sprawdza, czy dane słowo znajduje się w słowniku.
  @param[in] dict Słownik.
  @param[in] word Szukane słowo.
  @return Wartość logiczna czy `word` jest w słowniku.
  */
bool dictionary_find(const struct dictionary *dict, const wchar_t* word);


/**
  Zapisuje słownik.
  @param[in] dict Słownik.
  @param[in,out] stream Strumień, gdzie ma być zapisany słownik.
  @return <0 jeśli operacja się nie powiedzie, 0 w p.p.
  */
int dictionary_save(const struct dictionary *dict, FILE* stream);


/**
  Inicjuje i wczytuje słownik.
  Słownik ten należy zniszczyć za pomocą dictionary_done().
  @param[in,out] stream Strumień, skąd ma być wczytany słownik.
  @return Nowy słownik lub NULL, jeśli operacja się nie powiedzie.
  */
struct dictionary * dictionary_load(FILE* stream);


/**
  Obsługuje dict-check
  -# Czyta z podanego pliku i parsuje.
  -# Sprawdza czy słowo jest w słowniku.
  -# Wypisuje je zgodnie z poleceniem, tj. nowe słowo z "#"
  -# Wypisuje nowe słowa na stderr wraz z hintsami
  *  @param[in] int 1 jeśli parametr v, o w p.p.
  @param[in] char Nazwa pliku, z którego mamy czytać
  @return Nowy słownik lub NULL, jeśli operacja się nie powiedzie.
  */
struct dictionary * file( int v,const char * plik);


/**
  Sprawdza, czy dane słowo znajduje się w słowniku.
  @param[in] dict Słownik.
  @param[in] word Szukane słowo.
  @param[in,out] list Lista, w której zostaną umieszczone podpowiedzi.
  */
void dictionary_hints(const struct dictionary *dict, const wchar_t* word,
                      struct word_list *list);
                      
                      
                      
                      
/**
  Zwraca nazwy języków, dla których dostępne są słowniki.
  Powinny to być nazwy lokali bez kodowania. np.
  Przykładowe nazwy pl_PL, albo en_US.
  Reprezentacja listy języków jest podobna do
  list łańcuchów znakowych [argz w glibc'u](http://www.gnu.org/software/libc/manual/html_mono/libc.html#Argz-and-Envz-Vectors).
  `*list` jest wskaźnikiem na początek bufora,
  który ma długość `*list_len`.
  W buforze znajdują się łańcuchy znakowe
  jeden po drugim pooddzielane znakiem '\0'.
  Jeśli lista jest niepusta cały bufor też się kończy znakiem '\0'.
  Użytkownik jest odpowiedzialny za zwolnienie tej listy,
  w tym celu wystarczy wywołać `free(*list)`.
  @param[out] list Lista dostępnych języków.
  @param[out] list_len Długość bufora z listą dostępnych języków.
  @return <0 jeśli operacja się nie powiodła, 0 w p.p.
  */
int dictionary_lang_list(char **list, size_t *list_len);


/**
  Inicjuje i wczytuje słownik dla zadanego języka.
  Słownik ten należy zniszczyć za pomocą dictionary_done().
  @param[in] lang Nazwa języka, patrz dictionary_lang_list().
  @return Słownik dla danego języka lub NULL, jeśli operacja się nie powiedzie.
  */
struct dictionary * dictionary_load_lang(const char *lang);


/**
  Zapisuje słownik jak słownik dla ustalonego języka.
  @param[in] dict Słownik.
  @param[in] lang Nazwa języka, patrz dictionary_lang_list().
  @return <0 jeśli operacja się nie powiedzie, 0 w p.p.
  */
int dictionary_save_lang(const struct dictionary *dict, const char *lang);
                          


char** lang_list( char * buffor, int size);
#endif /* __DICTIONARY_H__ */
